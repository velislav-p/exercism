c049b433bb6aea4c6364c0adf981c98d
"use strict";

var _runLengthEncoding = require("./run-length-encoding");

describe('run-length encode a string', () => {
  xtest('encode empty string', () => {
    expect((0, _runLengthEncoding.encode)('')).toEqual('');
  });
  xtest('single characters only are encoded without count', () => {
    expect((0, _runLengthEncoding.encode)('XYZ')).toEqual('XYZ');
  });
  xtest('encode string with no single characters', () => {
    expect((0, _runLengthEncoding.encode)('AABBBCCCC')).toEqual('2A3B4C');
  });
  xtest('encode string with single characters mixed with repeated characters', () => {
    expect((0, _runLengthEncoding.encode)('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB')).toEqual('12WB12W3B24WB');
  });
  xtest('encode string with multiple whitespaces', () => {
    expect((0, _runLengthEncoding.encode)('  hsqq qww  ')).toEqual('2 hs2q q2w2 ');
  });
  xtest('encode string with lowercase characters', () => {
    expect((0, _runLengthEncoding.encode)('aabbbcccc')).toEqual('2a3b4c');
  });
});
describe('run-length decode a string', () => {
  test('decode empty string', () => {
    expect((0, _runLengthEncoding.decode)('')).toEqual('');
  });
  test('decode string with single characters only', () => {
    expect((0, _runLengthEncoding.decode)('XYZ')).toEqual('XYZ');
  });
  test('decode string with no single characters', () => {
    expect((0, _runLengthEncoding.decode)('2A3B4C')).toEqual('AABBBCCCC');
  });
  test('decode string with single characters mixed with repeated characters', () => {
    expect((0, _runLengthEncoding.decode)('12WB12W3B24WB')).toEqual('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB');
  });
  test('decode string with multiple whitespaces', () => {
    expect((0, _runLengthEncoding.decode)('2 hs2q q2w2 ')).toEqual('  hsqq qww  ');
  });
  test('decode string with lowercase characters', () => {
    expect((0, _runLengthEncoding.decode)('2a3b4c')).toEqual('aabbbcccc');
  });
});
describe('run-length encode and then decode', () => {
  xtest('encode followed by decode gives original string', () => {
    expect((0, _runLengthEncoding.decode)((0, _runLengthEncoding.encode)('zzz ZZ  zZ'))).toEqual('zzz ZZ  zZ');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bi1sZW5ndGgtZW5jb2Rpbmcuc3BlYy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInh0ZXN0IiwiZXhwZWN0IiwidG9FcXVhbCIsInRlc3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUFBLFFBQVEsQ0FBQyw0QkFBRCxFQUErQixNQUFNO0FBQzNDQyxFQUFBQSxLQUFLLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUNqQ0MsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLEVBQVAsQ0FBRCxDQUFOLENBQW1CQyxPQUFuQixDQUEyQixFQUEzQjtBQUNELEdBRkksQ0FBTDtBQUlBRixFQUFBQSxLQUFLLENBQUMsa0RBQUQsRUFBcUQsTUFBTTtBQUM5REMsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLEtBQVAsQ0FBRCxDQUFOLENBQXNCQyxPQUF0QixDQUE4QixLQUE5QjtBQUNELEdBRkksQ0FBTDtBQUlBRixFQUFBQSxLQUFLLENBQUMseUNBQUQsRUFBNEMsTUFBTTtBQUNyREMsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLFdBQVAsQ0FBRCxDQUFOLENBQTRCQyxPQUE1QixDQUFvQyxRQUFwQztBQUNELEdBRkksQ0FBTDtBQUlBRixFQUFBQSxLQUFLLENBQUMscUVBQUQsRUFBd0UsTUFBTTtBQUNqRkMsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLHVEQUFQLENBQUQsQ0FBTixDQUF3RUMsT0FBeEUsQ0FBZ0YsZUFBaEY7QUFDRCxHQUZJLENBQUw7QUFJQUYsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRDLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxjQUFQLENBQUQsQ0FBTixDQUErQkMsT0FBL0IsQ0FBdUMsY0FBdkM7QUFDRCxHQUZJLENBQUw7QUFJQUYsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRDLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxXQUFQLENBQUQsQ0FBTixDQUE0QkMsT0FBNUIsQ0FBb0MsUUFBcEM7QUFDRCxHQUZJLENBQUw7QUFHRCxDQXhCTyxDQUFSO0FBMEJBSCxRQUFRLENBQUMsNEJBQUQsRUFBK0IsTUFBTTtBQUMzQ0ksRUFBQUEsSUFBSSxDQUFDLHFCQUFELEVBQXdCLE1BQU07QUFDaENGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxFQUFQLENBQUQsQ0FBTixDQUFtQkMsT0FBbkIsQ0FBMkIsRUFBM0I7QUFDRCxHQUZHLENBQUo7QUFJQUMsRUFBQUEsSUFBSSxDQUFDLDJDQUFELEVBQThDLE1BQU07QUFDdERGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxLQUFQLENBQUQsQ0FBTixDQUFzQkMsT0FBdEIsQ0FBOEIsS0FBOUI7QUFDRCxHQUZHLENBQUo7QUFJQUMsRUFBQUEsSUFBSSxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDcERGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxRQUFQLENBQUQsQ0FBTixDQUF5QkMsT0FBekIsQ0FBaUMsV0FBakM7QUFDRCxHQUZHLENBQUo7QUFJQUMsRUFBQUEsSUFBSSxDQUFDLHFFQUFELEVBQXdFLE1BQU07QUFDaEZGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxlQUFQLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0MsdURBQXhDO0FBQ0QsR0FGRyxDQUFKO0FBSUFDLEVBQUFBLElBQUksQ0FBQyx5Q0FBRCxFQUE0QyxNQUFNO0FBQ3BERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sY0FBUCxDQUFELENBQU4sQ0FBK0JDLE9BQS9CLENBQXVDLGNBQXZDO0FBQ0QsR0FGRyxDQUFKO0FBSUFDLEVBQUFBLElBQUksQ0FBQyx5Q0FBRCxFQUE0QyxNQUFNO0FBQ3BERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sUUFBUCxDQUFELENBQU4sQ0FBeUJDLE9BQXpCLENBQWlDLFdBQWpDO0FBQ0QsR0FGRyxDQUFKO0FBR0QsQ0F4Qk8sQ0FBUjtBQTBCQUgsUUFBUSxDQUFDLG1DQUFELEVBQXNDLE1BQU07QUFDbERDLEVBQUFBLEtBQUssQ0FBQyxpREFBRCxFQUFvRCxNQUFNO0FBQzdEQyxJQUFBQSxNQUFNLENBQUMsK0JBQU8sK0JBQU8sWUFBUCxDQUFQLENBQUQsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsWUFBN0M7QUFDRCxHQUZJLENBQUw7QUFHRCxDQUpPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNvZGUsIGRlY29kZSB9IGZyb20gJy4vcnVuLWxlbmd0aC1lbmNvZGluZyc7XG5cbmRlc2NyaWJlKCdydW4tbGVuZ3RoIGVuY29kZSBhIHN0cmluZycsICgpID0+IHtcbiAgeHRlc3QoJ2VuY29kZSBlbXB0eSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVuY29kZSgnJykpLnRvRXF1YWwoJycpO1xuICB9KTtcblxuICB4dGVzdCgnc2luZ2xlIGNoYXJhY3RlcnMgb25seSBhcmUgZW5jb2RlZCB3aXRob3V0IGNvdW50JywgKCkgPT4ge1xuICAgIGV4cGVjdChlbmNvZGUoJ1hZWicpKS50b0VxdWFsKCdYWVonKTtcbiAgfSk7XG5cbiAgeHRlc3QoJ2VuY29kZSBzdHJpbmcgd2l0aCBubyBzaW5nbGUgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICBleHBlY3QoZW5jb2RlKCdBQUJCQkNDQ0MnKSkudG9FcXVhbCgnMkEzQjRDJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdlbmNvZGUgc3RyaW5nIHdpdGggc2luZ2xlIGNoYXJhY3RlcnMgbWl4ZWQgd2l0aCByZXBlYXRlZCBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgIGV4cGVjdChlbmNvZGUoJ1dXV1dXV1dXV1dXV0JXV1dXV1dXV1dXV1dCQkJXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dCJykpLnRvRXF1YWwoJzEyV0IxMlczQjI0V0InKTtcbiAgfSk7XG5cbiAgeHRlc3QoJ2VuY29kZSBzdHJpbmcgd2l0aCBtdWx0aXBsZSB3aGl0ZXNwYWNlcycsICgpID0+IHtcbiAgICBleHBlY3QoZW5jb2RlKCcgIGhzcXEgcXd3ICAnKSkudG9FcXVhbCgnMiBoczJxIHEydzIgJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdlbmNvZGUgc3RyaW5nIHdpdGggbG93ZXJjYXNlIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVuY29kZSgnYWFiYmJjY2NjJykpLnRvRXF1YWwoJzJhM2I0YycpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgncnVuLWxlbmd0aCBkZWNvZGUgYSBzdHJpbmcnLCAoKSA9PiB7XG4gIHRlc3QoJ2RlY29kZSBlbXB0eSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnJykpLnRvRXF1YWwoJycpO1xuICB9KTtcblxuICB0ZXN0KCdkZWNvZGUgc3RyaW5nIHdpdGggc2luZ2xlIGNoYXJhY3RlcnMgb25seScsICgpID0+IHtcbiAgICBleHBlY3QoZGVjb2RlKCdYWVonKSkudG9FcXVhbCgnWFlaJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2RlY29kZSBzdHJpbmcgd2l0aCBubyBzaW5nbGUgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICBleHBlY3QoZGVjb2RlKCcyQTNCNEMnKSkudG9FcXVhbCgnQUFCQkJDQ0NDJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2RlY29kZSBzdHJpbmcgd2l0aCBzaW5nbGUgY2hhcmFjdGVycyBtaXhlZCB3aXRoIHJlcGVhdGVkIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnMTJXQjEyVzNCMjRXQicpKS50b0VxdWFsKCdXV1dXV1dXV1dXV1dCV1dXV1dXV1dXV1dXQkJCV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXQicpO1xuICB9KTtcblxuICB0ZXN0KCdkZWNvZGUgc3RyaW5nIHdpdGggbXVsdGlwbGUgd2hpdGVzcGFjZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnMiBoczJxIHEydzIgJykpLnRvRXF1YWwoJyAgaHNxcSBxd3cgICcpO1xuICB9KTtcblxuICB0ZXN0KCdkZWNvZGUgc3RyaW5nIHdpdGggbG93ZXJjYXNlIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnMmEzYjRjJykpLnRvRXF1YWwoJ2FhYmJiY2NjYycpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgncnVuLWxlbmd0aCBlbmNvZGUgYW5kIHRoZW4gZGVjb2RlJywgKCkgPT4ge1xuICB4dGVzdCgnZW5jb2RlIGZvbGxvd2VkIGJ5IGRlY29kZSBnaXZlcyBvcmlnaW5hbCBzdHJpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZShlbmNvZGUoJ3p6eiBaWiAgelonKSkpLnRvRXF1YWwoJ3p6eiBaWiAgelonKTtcbiAgfSk7XG59KTtcbiJdfQ==