b6ef0cc5b708d007877c40aa605ba6ff
"use strict";

var _runLengthEncoding = require("./run-length-encoding");

describe('run-length encode a string', () => {
  test('encode empty string', () => {
    expect((0, _runLengthEncoding.encode)('')).toEqual('');
  });
  test('single characters only are encoded without count', () => {
    expect((0, _runLengthEncoding.encode)('XYZ')).toEqual('XYZ');
  });
  xtest('encode string with no single characters', () => {
    expect((0, _runLengthEncoding.encode)('AABBBCCCC')).toEqual('2A3B4C');
  });
  xtest('encode string with single characters mixed with repeated characters', () => {
    expect((0, _runLengthEncoding.encode)('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB')).toEqual('12WB12W3B24WB');
  });
  xtest('encode string with multiple whitespaces', () => {
    expect((0, _runLengthEncoding.encode)('  hsqq qww  ')).toEqual('2 hs2q q2w2 ');
  });
  xtest('encode string with lowercase characters', () => {
    expect((0, _runLengthEncoding.encode)('aabbbcccc')).toEqual('2a3b4c');
  });
});
describe('run-length decode a string', () => {
  xtest('decode empty string', () => {
    expect((0, _runLengthEncoding.decode)('')).toEqual('');
  });
  xtest('decode string with single characters only', () => {
    expect((0, _runLengthEncoding.decode)('XYZ')).toEqual('XYZ');
  });
  xtest('decode string with no single characters', () => {
    expect((0, _runLengthEncoding.decode)('2A3B4C')).toEqual('AABBBCCCC');
  });
  xtest('decode string with single characters mixed with repeated characters', () => {
    expect((0, _runLengthEncoding.decode)('12WB12W3B24WB')).toEqual('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB');
  });
  xtest('decode string with multiple whitespaces', () => {
    expect((0, _runLengthEncoding.decode)('2 hs2q q2w2 ')).toEqual('  hsqq qww  ');
  });
  xtest('decode string with lowercase characters', () => {
    expect((0, _runLengthEncoding.decode)('2a3b4c')).toEqual('aabbbcccc');
  });
});
describe('run-length encode and then decode', () => {
  xtest('encode followed by decode gives original string', () => {
    expect((0, _runLengthEncoding.decode)((0, _runLengthEncoding.encode)('zzz ZZ  zZ'))).toEqual('zzz ZZ  zZ');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bi1sZW5ndGgtZW5jb2Rpbmcuc3BlYy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ0b0VxdWFsIiwieHRlc3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUFBLFFBQVEsQ0FBQyw0QkFBRCxFQUErQixNQUFNO0FBQzNDQyxFQUFBQSxJQUFJLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUNoQ0MsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLEVBQVAsQ0FBRCxDQUFOLENBQW1CQyxPQUFuQixDQUEyQixFQUEzQjtBQUNELEdBRkcsQ0FBSjtBQUlBRixFQUFBQSxJQUFJLENBQUMsa0RBQUQsRUFBcUQsTUFBTTtBQUM3REMsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLEtBQVAsQ0FBRCxDQUFOLENBQXNCQyxPQUF0QixDQUE4QixLQUE5QjtBQUNELEdBRkcsQ0FBSjtBQUlBQyxFQUFBQSxLQUFLLENBQUMseUNBQUQsRUFBNEMsTUFBTTtBQUNyREYsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLFdBQVAsQ0FBRCxDQUFOLENBQTRCQyxPQUE1QixDQUFvQyxRQUFwQztBQUNELEdBRkksQ0FBTDtBQUlBQyxFQUFBQSxLQUFLLENBQUMscUVBQUQsRUFBd0UsTUFBTTtBQUNqRkYsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLHVEQUFQLENBQUQsQ0FBTixDQUF3RUMsT0FBeEUsQ0FBZ0YsZUFBaEY7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxjQUFQLENBQUQsQ0FBTixDQUErQkMsT0FBL0IsQ0FBdUMsY0FBdkM7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxXQUFQLENBQUQsQ0FBTixDQUE0QkMsT0FBNUIsQ0FBb0MsUUFBcEM7QUFDRCxHQUZJLENBQUw7QUFHRCxDQXhCTyxDQUFSO0FBMEJBSCxRQUFRLENBQUMsNEJBQUQsRUFBK0IsTUFBTTtBQUMzQ0ksRUFBQUEsS0FBSyxDQUFDLHFCQUFELEVBQXdCLE1BQU07QUFDakNGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxFQUFQLENBQUQsQ0FBTixDQUFtQkMsT0FBbkIsQ0FBMkIsRUFBM0I7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLDJDQUFELEVBQThDLE1BQU07QUFDdkRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxLQUFQLENBQUQsQ0FBTixDQUFzQkMsT0FBdEIsQ0FBOEIsS0FBOUI7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxRQUFQLENBQUQsQ0FBTixDQUF5QkMsT0FBekIsQ0FBaUMsV0FBakM7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHFFQUFELEVBQXdFLE1BQU07QUFDakZGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxlQUFQLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0MsdURBQXhDO0FBQ0QsR0FGSSxDQUFMO0FBSUFDLEVBQUFBLEtBQUssQ0FBQyx5Q0FBRCxFQUE0QyxNQUFNO0FBQ3JERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sY0FBUCxDQUFELENBQU4sQ0FBK0JDLE9BQS9CLENBQXVDLGNBQXZDO0FBQ0QsR0FGSSxDQUFMO0FBSUFDLEVBQUFBLEtBQUssQ0FBQyx5Q0FBRCxFQUE0QyxNQUFNO0FBQ3JERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sUUFBUCxDQUFELENBQU4sQ0FBeUJDLE9BQXpCLENBQWlDLFdBQWpDO0FBQ0QsR0FGSSxDQUFMO0FBR0QsQ0F4Qk8sQ0FBUjtBQTBCQUgsUUFBUSxDQUFDLG1DQUFELEVBQXNDLE1BQU07QUFDbERJLEVBQUFBLEtBQUssQ0FBQyxpREFBRCxFQUFvRCxNQUFNO0FBQzdERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sK0JBQU8sWUFBUCxDQUFQLENBQUQsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsWUFBN0M7QUFDRCxHQUZJLENBQUw7QUFHRCxDQUpPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNvZGUsIGRlY29kZSB9IGZyb20gJy4vcnVuLWxlbmd0aC1lbmNvZGluZyc7XG5cbmRlc2NyaWJlKCdydW4tbGVuZ3RoIGVuY29kZSBhIHN0cmluZycsICgpID0+IHtcbiAgdGVzdCgnZW5jb2RlIGVtcHR5IHN0cmluZycsICgpID0+IHtcbiAgICBleHBlY3QoZW5jb2RlKCcnKSkudG9FcXVhbCgnJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3NpbmdsZSBjaGFyYWN0ZXJzIG9ubHkgYXJlIGVuY29kZWQgd2l0aG91dCBjb3VudCcsICgpID0+IHtcbiAgICBleHBlY3QoZW5jb2RlKCdYWVonKSkudG9FcXVhbCgnWFlaJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdlbmNvZGUgc3RyaW5nIHdpdGggbm8gc2luZ2xlIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVuY29kZSgnQUFCQkJDQ0NDJykpLnRvRXF1YWwoJzJBM0I0QycpO1xuICB9KTtcblxuICB4dGVzdCgnZW5jb2RlIHN0cmluZyB3aXRoIHNpbmdsZSBjaGFyYWN0ZXJzIG1peGVkIHdpdGggcmVwZWF0ZWQgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICBleHBlY3QoZW5jb2RlKCdXV1dXV1dXV1dXV1dCV1dXV1dXV1dXV1dXQkJCV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXQicpKS50b0VxdWFsKCcxMldCMTJXM0IyNFdCJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdlbmNvZGUgc3RyaW5nIHdpdGggbXVsdGlwbGUgd2hpdGVzcGFjZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVuY29kZSgnICBoc3FxIHF3dyAgJykpLnRvRXF1YWwoJzIgaHMycSBxMncyICcpO1xuICB9KTtcblxuICB4dGVzdCgnZW5jb2RlIHN0cmluZyB3aXRoIGxvd2VyY2FzZSBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgIGV4cGVjdChlbmNvZGUoJ2FhYmJiY2NjYycpKS50b0VxdWFsKCcyYTNiNGMnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3J1bi1sZW5ndGggZGVjb2RlIGEgc3RyaW5nJywgKCkgPT4ge1xuICB4dGVzdCgnZGVjb2RlIGVtcHR5IHN0cmluZycsICgpID0+IHtcbiAgICBleHBlY3QoZGVjb2RlKCcnKSkudG9FcXVhbCgnJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdkZWNvZGUgc3RyaW5nIHdpdGggc2luZ2xlIGNoYXJhY3RlcnMgb25seScsICgpID0+IHtcbiAgICBleHBlY3QoZGVjb2RlKCdYWVonKSkudG9FcXVhbCgnWFlaJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdkZWNvZGUgc3RyaW5nIHdpdGggbm8gc2luZ2xlIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnMkEzQjRDJykpLnRvRXF1YWwoJ0FBQkJCQ0NDQycpO1xuICB9KTtcblxuICB4dGVzdCgnZGVjb2RlIHN0cmluZyB3aXRoIHNpbmdsZSBjaGFyYWN0ZXJzIG1peGVkIHdpdGggcmVwZWF0ZWQgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICBleHBlY3QoZGVjb2RlKCcxMldCMTJXM0IyNFdCJykpLnRvRXF1YWwoJ1dXV1dXV1dXV1dXV0JXV1dXV1dXV1dXV1dCQkJXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dCJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdkZWNvZGUgc3RyaW5nIHdpdGggbXVsdGlwbGUgd2hpdGVzcGFjZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnMiBoczJxIHEydzIgJykpLnRvRXF1YWwoJyAgaHNxcSBxd3cgICcpO1xuICB9KTtcblxuICB4dGVzdCgnZGVjb2RlIHN0cmluZyB3aXRoIGxvd2VyY2FzZSBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgIGV4cGVjdChkZWNvZGUoJzJhM2I0YycpKS50b0VxdWFsKCdhYWJiYmNjY2MnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3J1bi1sZW5ndGggZW5jb2RlIGFuZCB0aGVuIGRlY29kZScsICgpID0+IHtcbiAgeHRlc3QoJ2VuY29kZSBmb2xsb3dlZCBieSBkZWNvZGUgZ2l2ZXMgb3JpZ2luYWwgc3RyaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdChkZWNvZGUoZW5jb2RlKCd6enogWlogIHpaJykpKS50b0VxdWFsKCd6enogWlogIHpaJyk7XG4gIH0pO1xufSk7XG4iXX0=