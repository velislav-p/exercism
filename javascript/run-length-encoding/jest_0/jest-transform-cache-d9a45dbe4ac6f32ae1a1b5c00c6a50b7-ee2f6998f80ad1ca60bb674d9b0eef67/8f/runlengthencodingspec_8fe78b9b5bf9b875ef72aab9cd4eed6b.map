{"version":3,"sources":["run-length-encoding.spec.js"],"names":["describe","test","expect","toEqual","xtest"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,4BAAD,EAA+B,MAAM;AAC3CC,EAAAA,IAAI,CAAC,qBAAD,EAAwB,MAAM;AAChCC,IAAAA,MAAM,CAAC,+BAAO,EAAP,CAAD,CAAN,CAAmBC,OAAnB,CAA2B,EAA3B;AACD,GAFG,CAAJ;AAIAC,EAAAA,KAAK,CAAC,kDAAD,EAAqD,MAAM;AAC9DF,IAAAA,MAAM,CAAC,+BAAO,KAAP,CAAD,CAAN,CAAsBC,OAAtB,CAA8B,KAA9B;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,yCAAD,EAA4C,MAAM;AACrDF,IAAAA,MAAM,CAAC,+BAAO,WAAP,CAAD,CAAN,CAA4BC,OAA5B,CAAoC,QAApC;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,qEAAD,EAAwE,MAAM;AACjFF,IAAAA,MAAM,CAAC,+BAAO,uDAAP,CAAD,CAAN,CAAwEC,OAAxE,CAAgF,eAAhF;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,yCAAD,EAA4C,MAAM;AACrDF,IAAAA,MAAM,CAAC,+BAAO,cAAP,CAAD,CAAN,CAA+BC,OAA/B,CAAuC,cAAvC;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,yCAAD,EAA4C,MAAM;AACrDF,IAAAA,MAAM,CAAC,+BAAO,WAAP,CAAD,CAAN,CAA4BC,OAA5B,CAAoC,QAApC;AACD,GAFI,CAAL;AAGD,CAxBO,CAAR;AA0BAH,QAAQ,CAAC,4BAAD,EAA+B,MAAM;AAC3CI,EAAAA,KAAK,CAAC,qBAAD,EAAwB,MAAM;AACjCF,IAAAA,MAAM,CAAC,+BAAO,EAAP,CAAD,CAAN,CAAmBC,OAAnB,CAA2B,EAA3B;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,2CAAD,EAA8C,MAAM;AACvDF,IAAAA,MAAM,CAAC,+BAAO,KAAP,CAAD,CAAN,CAAsBC,OAAtB,CAA8B,KAA9B;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,yCAAD,EAA4C,MAAM;AACrDF,IAAAA,MAAM,CAAC,+BAAO,QAAP,CAAD,CAAN,CAAyBC,OAAzB,CAAiC,WAAjC;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,qEAAD,EAAwE,MAAM;AACjFF,IAAAA,MAAM,CAAC,+BAAO,eAAP,CAAD,CAAN,CAAgCC,OAAhC,CAAwC,uDAAxC;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,yCAAD,EAA4C,MAAM;AACrDF,IAAAA,MAAM,CAAC,+BAAO,cAAP,CAAD,CAAN,CAA+BC,OAA/B,CAAuC,cAAvC;AACD,GAFI,CAAL;AAIAC,EAAAA,KAAK,CAAC,yCAAD,EAA4C,MAAM;AACrDF,IAAAA,MAAM,CAAC,+BAAO,QAAP,CAAD,CAAN,CAAyBC,OAAzB,CAAiC,WAAjC;AACD,GAFI,CAAL;AAGD,CAxBO,CAAR;AA0BAH,QAAQ,CAAC,mCAAD,EAAsC,MAAM;AAClDI,EAAAA,KAAK,CAAC,iDAAD,EAAoD,MAAM;AAC7DF,IAAAA,MAAM,CAAC,+BAAO,+BAAO,YAAP,CAAP,CAAD,CAAN,CAAqCC,OAArC,CAA6C,YAA7C;AACD,GAFI,CAAL;AAGD,CAJO,CAAR","sourcesContent":["import { encode, decode } from './run-length-encoding';\n\ndescribe('run-length encode a string', () => {\n  test('encode empty string', () => {\n    expect(encode('')).toEqual('');\n  });\n\n  xtest('single characters only are encoded without count', () => {\n    expect(encode('XYZ')).toEqual('XYZ');\n  });\n\n  xtest('encode string with no single characters', () => {\n    expect(encode('AABBBCCCC')).toEqual('2A3B4C');\n  });\n\n  xtest('encode string with single characters mixed with repeated characters', () => {\n    expect(encode('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB')).toEqual('12WB12W3B24WB');\n  });\n\n  xtest('encode string with multiple whitespaces', () => {\n    expect(encode('  hsqq qww  ')).toEqual('2 hs2q q2w2 ');\n  });\n\n  xtest('encode string with lowercase characters', () => {\n    expect(encode('aabbbcccc')).toEqual('2a3b4c');\n  });\n});\n\ndescribe('run-length decode a string', () => {\n  xtest('decode empty string', () => {\n    expect(decode('')).toEqual('');\n  });\n\n  xtest('decode string with single characters only', () => {\n    expect(decode('XYZ')).toEqual('XYZ');\n  });\n\n  xtest('decode string with no single characters', () => {\n    expect(decode('2A3B4C')).toEqual('AABBBCCCC');\n  });\n\n  xtest('decode string with single characters mixed with repeated characters', () => {\n    expect(decode('12WB12W3B24WB')).toEqual('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB');\n  });\n\n  xtest('decode string with multiple whitespaces', () => {\n    expect(decode('2 hs2q q2w2 ')).toEqual('  hsqq qww  ');\n  });\n\n  xtest('decode string with lowercase characters', () => {\n    expect(decode('2a3b4c')).toEqual('aabbbcccc');\n  });\n});\n\ndescribe('run-length encode and then decode', () => {\n  xtest('encode followed by decode gives original string', () => {\n    expect(decode(encode('zzz ZZ  zZ'))).toEqual('zzz ZZ  zZ');\n  });\n});\n"]}