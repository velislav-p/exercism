bcafd0e2f02795e13a0a69450e2e70e5
"use strict";

var _runLengthEncoding = require("./run-length-encoding");

describe('run-length encode a string', () => {
  test('encode empty string', () => {
    expect((0, _runLengthEncoding.encode)('')).toEqual('');
  });
  xtest('single characters only are encoded without count', () => {
    expect((0, _runLengthEncoding.encode)('XYZ')).toEqual('XYZ');
  });
  xtest('encode string with no single characters', () => {
    expect((0, _runLengthEncoding.encode)('AABBBCCCC')).toEqual('2A3B4C');
  });
  xtest('encode string with single characters mixed with repeated characters', () => {
    expect((0, _runLengthEncoding.encode)('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB')).toEqual('12WB12W3B24WB');
  });
  xtest('encode string with multiple whitespaces', () => {
    expect((0, _runLengthEncoding.encode)('  hsqq qww  ')).toEqual('2 hs2q q2w2 ');
  });
  xtest('encode string with lowercase characters', () => {
    expect((0, _runLengthEncoding.encode)('aabbbcccc')).toEqual('2a3b4c');
  });
});
describe('run-length decode a string', () => {
  xtest('decode empty string', () => {
    expect((0, _runLengthEncoding.decode)('')).toEqual('');
  });
  xtest('decode string with single characters only', () => {
    expect((0, _runLengthEncoding.decode)('XYZ')).toEqual('XYZ');
  });
  xtest('decode string with no single characters', () => {
    expect((0, _runLengthEncoding.decode)('2A3B4C')).toEqual('AABBBCCCC');
  });
  xtest('decode string with single characters mixed with repeated characters', () => {
    expect((0, _runLengthEncoding.decode)('12WB12W3B24WB')).toEqual('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB');
  });
  xtest('decode string with multiple whitespaces', () => {
    expect((0, _runLengthEncoding.decode)('2 hs2q q2w2 ')).toEqual('  hsqq qww  ');
  });
  xtest('decode string with lowercase characters', () => {
    expect((0, _runLengthEncoding.decode)('2a3b4c')).toEqual('aabbbcccc');
  });
});
describe('run-length encode and then decode', () => {
  xtest('encode followed by decode gives original string', () => {
    expect((0, _runLengthEncoding.decode)((0, _runLengthEncoding.encode)('zzz ZZ  zZ'))).toEqual('zzz ZZ  zZ');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bi1sZW5ndGgtZW5jb2Rpbmcuc3BlYy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJ0b0VxdWFsIiwieHRlc3QiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUFBLFFBQVEsQ0FBQyw0QkFBRCxFQUErQixNQUFNO0FBQzNDQyxFQUFBQSxJQUFJLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUNoQ0MsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLEVBQVAsQ0FBRCxDQUFOLENBQW1CQyxPQUFuQixDQUEyQixFQUEzQjtBQUNELEdBRkcsQ0FBSjtBQUlBQyxFQUFBQSxLQUFLLENBQUMsa0RBQUQsRUFBcUQsTUFBTTtBQUM5REYsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLEtBQVAsQ0FBRCxDQUFOLENBQXNCQyxPQUF0QixDQUE4QixLQUE5QjtBQUNELEdBRkksQ0FBTDtBQUlBQyxFQUFBQSxLQUFLLENBQUMseUNBQUQsRUFBNEMsTUFBTTtBQUNyREYsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLFdBQVAsQ0FBRCxDQUFOLENBQTRCQyxPQUE1QixDQUFvQyxRQUFwQztBQUNELEdBRkksQ0FBTDtBQUlBQyxFQUFBQSxLQUFLLENBQUMscUVBQUQsRUFBd0UsTUFBTTtBQUNqRkYsSUFBQUEsTUFBTSxDQUFDLCtCQUFPLHVEQUFQLENBQUQsQ0FBTixDQUF3RUMsT0FBeEUsQ0FBZ0YsZUFBaEY7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxjQUFQLENBQUQsQ0FBTixDQUErQkMsT0FBL0IsQ0FBdUMsY0FBdkM7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxXQUFQLENBQUQsQ0FBTixDQUE0QkMsT0FBNUIsQ0FBb0MsUUFBcEM7QUFDRCxHQUZJLENBQUw7QUFHRCxDQXhCTyxDQUFSO0FBMEJBSCxRQUFRLENBQUMsNEJBQUQsRUFBK0IsTUFBTTtBQUMzQ0ksRUFBQUEsS0FBSyxDQUFDLHFCQUFELEVBQXdCLE1BQU07QUFDakNGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxFQUFQLENBQUQsQ0FBTixDQUFtQkMsT0FBbkIsQ0FBMkIsRUFBM0I7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLDJDQUFELEVBQThDLE1BQU07QUFDdkRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxLQUFQLENBQUQsQ0FBTixDQUFzQkMsT0FBdEIsQ0FBOEIsS0FBOUI7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHlDQUFELEVBQTRDLE1BQU07QUFDckRGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxRQUFQLENBQUQsQ0FBTixDQUF5QkMsT0FBekIsQ0FBaUMsV0FBakM7QUFDRCxHQUZJLENBQUw7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLHFFQUFELEVBQXdFLE1BQU07QUFDakZGLElBQUFBLE1BQU0sQ0FBQywrQkFBTyxlQUFQLENBQUQsQ0FBTixDQUFnQ0MsT0FBaEMsQ0FBd0MsdURBQXhDO0FBQ0QsR0FGSSxDQUFMO0FBSUFDLEVBQUFBLEtBQUssQ0FBQyx5Q0FBRCxFQUE0QyxNQUFNO0FBQ3JERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sY0FBUCxDQUFELENBQU4sQ0FBK0JDLE9BQS9CLENBQXVDLGNBQXZDO0FBQ0QsR0FGSSxDQUFMO0FBSUFDLEVBQUFBLEtBQUssQ0FBQyx5Q0FBRCxFQUE0QyxNQUFNO0FBQ3JERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sUUFBUCxDQUFELENBQU4sQ0FBeUJDLE9BQXpCLENBQWlDLFdBQWpDO0FBQ0QsR0FGSSxDQUFMO0FBR0QsQ0F4Qk8sQ0FBUjtBQTBCQUgsUUFBUSxDQUFDLG1DQUFELEVBQXNDLE1BQU07QUFDbERJLEVBQUFBLEtBQUssQ0FBQyxpREFBRCxFQUFvRCxNQUFNO0FBQzdERixJQUFBQSxNQUFNLENBQUMsK0JBQU8sK0JBQU8sWUFBUCxDQUFQLENBQUQsQ0FBTixDQUFxQ0MsT0FBckMsQ0FBNkMsWUFBN0M7QUFDRCxHQUZJLENBQUw7QUFHRCxDQUpPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbmNvZGUsIGRlY29kZSB9IGZyb20gJy4vcnVuLWxlbmd0aC1lbmNvZGluZyc7XG5cbmRlc2NyaWJlKCdydW4tbGVuZ3RoIGVuY29kZSBhIHN0cmluZycsICgpID0+IHtcbiAgdGVzdCgnZW5jb2RlIGVtcHR5IHN0cmluZycsICgpID0+IHtcbiAgICBleHBlY3QoZW5jb2RlKCcnKSkudG9FcXVhbCgnJyk7XG4gIH0pO1xuXG4gIHh0ZXN0KCdzaW5nbGUgY2hhcmFjdGVycyBvbmx5IGFyZSBlbmNvZGVkIHdpdGhvdXQgY291bnQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVuY29kZSgnWFlaJykpLnRvRXF1YWwoJ1hZWicpO1xuICB9KTtcblxuICB4dGVzdCgnZW5jb2RlIHN0cmluZyB3aXRoIG5vIHNpbmdsZSBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgIGV4cGVjdChlbmNvZGUoJ0FBQkJCQ0NDQycpKS50b0VxdWFsKCcyQTNCNEMnKTtcbiAgfSk7XG5cbiAgeHRlc3QoJ2VuY29kZSBzdHJpbmcgd2l0aCBzaW5nbGUgY2hhcmFjdGVycyBtaXhlZCB3aXRoIHJlcGVhdGVkIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGVuY29kZSgnV1dXV1dXV1dXV1dXQldXV1dXV1dXV1dXV0JCQldXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV0InKSkudG9FcXVhbCgnMTJXQjEyVzNCMjRXQicpO1xuICB9KTtcblxuICB4dGVzdCgnZW5jb2RlIHN0cmluZyB3aXRoIG11bHRpcGxlIHdoaXRlc3BhY2VzJywgKCkgPT4ge1xuICAgIGV4cGVjdChlbmNvZGUoJyAgaHNxcSBxd3cgICcpKS50b0VxdWFsKCcyIGhzMnEgcTJ3MiAnKTtcbiAgfSk7XG5cbiAgeHRlc3QoJ2VuY29kZSBzdHJpbmcgd2l0aCBsb3dlcmNhc2UgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICBleHBlY3QoZW5jb2RlKCdhYWJiYmNjY2MnKSkudG9FcXVhbCgnMmEzYjRjJyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdydW4tbGVuZ3RoIGRlY29kZSBhIHN0cmluZycsICgpID0+IHtcbiAgeHRlc3QoJ2RlY29kZSBlbXB0eSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnJykpLnRvRXF1YWwoJycpO1xuICB9KTtcblxuICB4dGVzdCgnZGVjb2RlIHN0cmluZyB3aXRoIHNpbmdsZSBjaGFyYWN0ZXJzIG9ubHknLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnWFlaJykpLnRvRXF1YWwoJ1hZWicpO1xuICB9KTtcblxuICB4dGVzdCgnZGVjb2RlIHN0cmluZyB3aXRoIG5vIHNpbmdsZSBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgIGV4cGVjdChkZWNvZGUoJzJBM0I0QycpKS50b0VxdWFsKCdBQUJCQkNDQ0MnKTtcbiAgfSk7XG5cbiAgeHRlc3QoJ2RlY29kZSBzdHJpbmcgd2l0aCBzaW5nbGUgY2hhcmFjdGVycyBtaXhlZCB3aXRoIHJlcGVhdGVkIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlY29kZSgnMTJXQjEyVzNCMjRXQicpKS50b0VxdWFsKCdXV1dXV1dXV1dXV1dCV1dXV1dXV1dXV1dXQkJCV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXQicpO1xuICB9KTtcblxuICB4dGVzdCgnZGVjb2RlIHN0cmluZyB3aXRoIG11bHRpcGxlIHdoaXRlc3BhY2VzJywgKCkgPT4ge1xuICAgIGV4cGVjdChkZWNvZGUoJzIgaHMycSBxMncyICcpKS50b0VxdWFsKCcgIGhzcXEgcXd3ICAnKTtcbiAgfSk7XG5cbiAgeHRlc3QoJ2RlY29kZSBzdHJpbmcgd2l0aCBsb3dlcmNhc2UgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICBleHBlY3QoZGVjb2RlKCcyYTNiNGMnKSkudG9FcXVhbCgnYWFiYmJjY2NjJyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdydW4tbGVuZ3RoIGVuY29kZSBhbmQgdGhlbiBkZWNvZGUnLCAoKSA9PiB7XG4gIHh0ZXN0KCdlbmNvZGUgZm9sbG93ZWQgYnkgZGVjb2RlIGdpdmVzIG9yaWdpbmFsIHN0cmluZycsICgpID0+IHtcbiAgICBleHBlY3QoZGVjb2RlKGVuY29kZSgnenp6IFpaICB6WicpKSkudG9FcXVhbCgnenp6IFpaICB6WicpO1xuICB9KTtcbn0pO1xuIl19